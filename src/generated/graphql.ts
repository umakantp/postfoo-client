/* IMP: This file is auto-generated by npm run generate, don't change manually */
import gql from 'graphql-tag'
import * as Apollo from '@apollo/client'
import { FieldPolicy, FieldReadFunction, TypePolicies, TypePolicy } from '@apollo/client/cache'
export type Maybe<T> = T | undefined
export type InputMaybe<T> = T | undefined
export type Exact<T extends Record<string, unknown>> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
export type MakeEmpty<T extends Record<string, unknown>, K extends keyof T> = Partial<Record<K, never>>
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never }
const defaultOptions = {} as const
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: { input: string, output: string },
  String: { input: string, output: string },
  Boolean: { input: boolean, output: boolean },
  Int: { input: number, output: number },
  Float: { input: number, output: number },
  BigInt: { input: number, output: number },
  Date: { input: string, output: string },
  DateTime: { input: string, output: string },
  EmailAddress: { input: string, output: string },
  JWT: { input: string, output: string },
  PhoneNumber: { input: string, output: string },
  URL: { input: string, output: string },
  Void: { input: void, output: void },
}

export type Code = Node & {
  /**  The OTP code that was sent to the user  */
  code: Scalars['ID']['output'],
  createdAt: Scalars['DateTime']['output'],
  /**  When the code expires if set  */
  expireAt?: Maybe<Scalars['DateTime']['output']>,
  id: Scalars['ID']['output'],
  updatedAt: Scalars['DateTime']['output'],
  /**  The user that this code is for  */
  user: User,
}

export interface CreateFundInput {
  category?: InputMaybe<FundCategory>,
  description?: InputMaybe<Scalars['String']['input']>,
  lastNav: Scalars['Float']['input'],
  name: Scalars['String']['input'],
  plan: FundPlan,
  symbol1?: InputMaybe<Scalars['String']['input']>,
  symbol2?: InputMaybe<Scalars['String']['input']>,
  type?: InputMaybe<FundType>,
}

export interface CreatePortfolioFundInput {
  cost: Scalars['Float']['input'],
  fundId: Scalars['ID']['input'],
  portfolioId: Scalars['ID']['input'],
  units: Scalars['Float']['input'],
}

export interface CreatePortfolioInput {
  description?: InputMaybe<Scalars['String']['input']>,
  name: Scalars['String']['input'],
}

export interface DeleteFundInput {
  fundId: Scalars['ID']['input'],
}

export interface DeletePortfolioFundInput {
  portfolioFundId: Scalars['ID']['input'],
}

export interface DeletePortfolioInput {
  portfolioId: Scalars['ID']['input'],
}

/**  Error codes  */
export enum ErrorCode {
  BAD_USER_INPUT = 'BAD_USER_INPUT',
  CONFLICT = 'CONFLICT',
  DATABASE_ERROR = 'DATABASE_ERROR',
  FORBIDDEN = 'FORBIDDEN',
  GRAPHQL_PARSE_FAILED = 'GRAPHQL_PARSE_FAILED',
  GRAPHQL_VALIDATION_FAILED = 'GRAPHQL_VALIDATION_FAILED',
  INTERNAL_SERVER_ERROR = 'INTERNAL_SERVER_ERROR',
  LOCKED = 'LOCKED',
  METHOD_NOT_ALLOWED = 'METHOD_NOT_ALLOWED',
  NOT_FOUND = 'NOT_FOUND',
  TOO_MANY_REQUESTS = 'TOO_MANY_REQUESTS',
  UNAUTHENTICATED = 'UNAUTHENTICATED'
}

export interface ForgotPasswordInput {
  from__confirm?: InputMaybe<Scalars['String']['input']>,
  mobile: Scalars['PhoneNumber']['input'],
  name__confirm?: InputMaybe<Scalars['String']['input']>,
}

export type Fund = Node & {
  /**  Hybrid or Equity or Debt or FOF  */
  category?: Maybe<FundCategory>,
  createdAt: Scalars['DateTime']['output'],
  description?: Maybe<Scalars['String']['output']>,
  id: Scalars['ID']['output'],
  lastNav: Scalars['Float']['output'],
  name: Scalars['String']['output'],
  /**  Direct or Regular  */
  plan?: Maybe<FundPlan>,
  /**  Store google finance symbol  */
  symbol1?: Maybe<Scalars['String']['output']>,
  /**  Any other external symbol for future  */
  symbol2?: Maybe<Scalars['String']['output']>,
  /**  Growth or IDCW  */
  type?: Maybe<FundType>,
  updatedAt: Scalars['DateTime']['output'],
}

export enum FundCategory {
  CHILDRENS_FUND = 'CHILDRENS_FUND',
  DEBT_BANKING_AND_PSU = 'DEBT_BANKING_AND_PSU',
  DEBT_CORPORATE_BOND = 'DEBT_CORPORATE_BOND',
  DEBT_CREDIT_RISK = 'DEBT_CREDIT_RISK',
  DEBT_DYNAMIC_BOND = 'DEBT_DYNAMIC_BOND',
  DEBT_FLOATER = 'DEBT_FLOATER',
  DEBT_GILT = 'DEBT_GILT',
  DEBT_GILT_10_YEARS_CONSTANT = 'DEBT_GILT_10_YEARS_CONSTANT',
  DEBT_LIQUID = 'DEBT_LIQUID',
  DEBT_LONG_DURATION = 'DEBT_LONG_DURATION',
  DEBT_LOW_DURATION = 'DEBT_LOW_DURATION',
  DEBT_MEDIUM_DURATION = 'DEBT_MEDIUM_DURATION',
  DEBT_MEDIUM_TO_LONG_DURATION = 'DEBT_MEDIUM_TO_LONG_DURATION',
  DEBT_MONEY_MARKET = 'DEBT_MONEY_MARKET',
  DEBT_OVERNIGHT = 'DEBT_OVERNIGHT',
  DEBT_SHORT_DURATION = 'DEBT_SHORT_DURATION',
  DEBT_ULTRA_SHORT_DURATION = 'DEBT_ULTRA_SHORT_DURATION',
  EQUITY_BANKING_AND_FINANCIAL_SERVICES = 'EQUITY_BANKING_AND_FINANCIAL_SERVICES',
  EQUITY_DIVIDEND_YIELD = 'EQUITY_DIVIDEND_YIELD',
  EQUITY_ELSS = 'EQUITY_ELSS',
  EQUITY_FLEXI_CAP = 'EQUITY_FLEXI_CAP',
  EQUITY_FOCUSED = 'EQUITY_FOCUSED',
  EQUITY_LARGE_AND_MID_CAP = 'EQUITY_LARGE_AND_MID_CAP',
  EQUITY_LARGE_CAP = 'EQUITY_LARGE_CAP',
  EQUITY_MID_CAP = 'EQUITY_MID_CAP',
  EQUITY_MULTI_CAP = 'EQUITY_MULTI_CAP',
  EQUITY_SECTORAL_INFRASTRUCTURE = 'EQUITY_SECTORAL_INFRASTRUCTURE',
  EQUITY_SECTORAL_PHARMA_AND_HEALTHCARE = 'EQUITY_SECTORAL_PHARMA_AND_HEALTHCARE',
  EQUITY_SECTORAL_TECHNOLOGY = 'EQUITY_SECTORAL_TECHNOLOGY',
  EQUITY_SMALL_CAP = 'EQUITY_SMALL_CAP',
  EQUITY_THEMATIC_CONSUMPTION = 'EQUITY_THEMATIC_CONSUMPTION',
  EQUITY_THEMATIC_ESG = 'EQUITY_THEMATIC_ESG',
  EQUITY_THEMATIC_INTERNATIONAL = 'EQUITY_THEMATIC_INTERNATIONAL',
  EQUITY_THEMATIC_MANUFACTURING = 'EQUITY_THEMATIC_MANUFACTURING',
  EQUITY_THEMATIC_MNC = 'EQUITY_THEMATIC_MNC',
  EQUITY_THEMATIC_OTHERS = 'EQUITY_THEMATIC_OTHERS',
  EQUITY_THEMATIC_PSU = 'EQUITY_THEMATIC_PSU',
  EQUITY_THEMATIC_QUANTITATIVE = 'EQUITY_THEMATIC_QUANTITATIVE',
  EQUITY_THEMATIC_TRANSPORTATION = 'EQUITY_THEMATIC_TRANSPORTATION',
  EQUITY_VALUE = 'EQUITY_VALUE',
  ETF = 'ETF',
  FOF_DOMESTIC_DEBT = 'FOF_DOMESTIC_DEBT',
  FOF_DOMESTIC_EQUITY = 'FOF_DOMESTIC_EQUITY',
  FOF_DOMESTIC_GOLD = 'FOF_DOMESTIC_GOLD',
  FOF_DOMESTIC_HYBRID = 'FOF_DOMESTIC_HYBRID',
  FOF_DOMESTIC_SILVER = 'FOF_DOMESTIC_SILVER',
  FOF_OVERSEAS = 'FOF_OVERSEAS',
  HYBRID_AGGRESSIVE = 'HYBRID_AGGRESSIVE',
  HYBRID_ARBITRAGE = 'HYBRID_ARBITRAGE',
  HYBRID_CONSERVATIVE = 'HYBRID_CONSERVATIVE',
  HYBRID_DYNAMIC_ASSET_ALLOCATION = 'HYBRID_DYNAMIC_ASSET_ALLOCATION',
  HYBRID_EQUITY_SAVINGS = 'HYBRID_EQUITY_SAVINGS',
  HYBRID_MULTI_ASSET_ALLOCATION = 'HYBRID_MULTI_ASSET_ALLOCATION',
  INDEX_FUND = 'INDEX_FUND',
  RETIREMENT_FUND = 'RETIREMENT_FUND'
}

export enum FundPlan {
  Direct = 'Direct',
  Regular = 'Regular'
}

export enum FundType {
  BONUS = 'BONUS',
  GROWTH = 'GROWTH',
  IDCW = 'IDCW',
  IDCW_DAILY_PAYOUT = 'IDCW_DAILY_PAYOUT',
  IDCW_DAILY_REINVESTMENT = 'IDCW_DAILY_REINVESTMENT',
  IDCW_HALFYEARLY_PAYOUT = 'IDCW_HALFYEARLY_PAYOUT',
  IDCW_HALFYEARLY_REINVESTMENT = 'IDCW_HALFYEARLY_REINVESTMENT',
  IDCW_MONTHLY_PAYOUT = 'IDCW_MONTHLY_PAYOUT',
  IDCW_MONTHLY_REINVESTMENT = 'IDCW_MONTHLY_REINVESTMENT',
  IDCW_PAYOUT = 'IDCW_PAYOUT',
  IDCW_QUARTERLY_PAYOUT = 'IDCW_QUARTERLY_PAYOUT',
  IDCW_QUARTERLY_REINVESTMENT = 'IDCW_QUARTERLY_REINVESTMENT',
  IDCW_REINVESTMENT = 'IDCW_REINVESTMENT',
  IDCW_WEEKLY_PAYOUT = 'IDCW_WEEKLY_PAYOUT',
  IDCW_WEEKLY_REINVESTMENT = 'IDCW_WEEKLY_REINVESTMENT',
  IDCW_YEARLY_PAYOUT = 'IDCW_YEARLY_PAYOUT',
  IDCW_YEARLY_REINVESTMENT = 'IDCW_YEARLY_REINVESTMENT'
}

export interface FundsInput {
  category?: InputMaybe<FundCategory>,
  page?: InputMaybe<PageInput>,
  plan?: InputMaybe<FundPlan>,
  search?: InputMaybe<Scalars['String']['input']>,
  type?: InputMaybe<FundType>,
}

export type FundsPayload = PagePayload & {
  nodes: Fund[],
  pageInfo: PageInfo,
  total: Scalars['Int']['output'],
}

export type Membership = Node & {
  createdAt: Scalars['DateTime']['output'],
  id: Scalars['ID']['output'],
  portfolio: Portfolio,
  role: UserRole,
  updatedAt: Scalars['DateTime']['output'],
  user: User,
}

export interface Mutation {
  createFund: Fund,
  createPortfolio: Portfolio,
  createPortfolioFund: PortfolioFund,
  deleteFund: SuccessPayload,
  deletePortfolio: SuccessPayload,
  deletePortfolioFund: SuccessPayload,
  forgotPassword: SuccessPayload,
  resendCode: SuccessPayload,
  resetPassword: SuccessPayload,
  signIn: User,
  signUp: User,
  updateFund: Fund,
  updatePortfolio: Portfolio,
  updatePortfolioFund: PortfolioFund,
  verifyCode: SuccessPayload,
}


export interface MutationCreateFundArgs {
  input: CreateFundInput,
}


export interface MutationCreatePortfolioArgs {
  input: CreatePortfolioInput,
}


export interface MutationCreatePortfolioFundArgs {
  input: CreatePortfolioFundInput,
}


export interface MutationDeleteFundArgs {
  input: DeleteFundInput,
}


export interface MutationDeletePortfolioArgs {
  input: DeletePortfolioInput,
}


export interface MutationDeletePortfolioFundArgs {
  input: DeletePortfolioFundInput,
}


export interface MutationForgotPasswordArgs {
  input: ForgotPasswordInput,
}


export interface MutationResendCodeArgs {
  input: ResendCodeInput,
}


export interface MutationResetPasswordArgs {
  input: ResetPasswordInput,
}


export interface MutationSignInArgs {
  input: SignInInput,
}


export interface MutationSignUpArgs {
  input: SignUpInput,
}


export interface MutationUpdateFundArgs {
  input: UpdateFundInput,
}


export interface MutationUpdatePortfolioArgs {
  input: UpdatePortfolioInput,
}


export interface MutationUpdatePortfolioFundArgs {
  input: UpdatePortfolioFundInput,
}


export interface MutationVerifyCodeArgs {
  input: VerifyCodeInput,
}

export interface Node {
  createdAt: Scalars['DateTime']['output'],
  id: Scalars['ID']['output'],
  updatedAt: Scalars['DateTime']['output'],
}

export interface PageInfo {
  endCursor?: Maybe<Scalars['String']['output']>,
  hasNextPage: Scalars['Boolean']['output'],
  hasPreviousPage: Scalars['Boolean']['output'],
  startCursor?: Maybe<Scalars['String']['output']>,
}

export interface PageInput {
  /**  Cursor-based pagination, load after this cursor  */
  after?: InputMaybe<Scalars['String']['input']>,
  /**  How many to load (from the start), supports 0 for getting the `total`  */
  first?: InputMaybe<Scalars['Int']['input']>,
  /**  How many to load (from the end, reversed results)  */
  last?: InputMaybe<Scalars['Int']['input']>,
  /**  Offset-based pagination, skip this many  */
  offset?: InputMaybe<Scalars['Int']['input']>,
}

export interface PagePayload {
  nodes: Node[],
  pageInfo: PageInfo,
  total: Scalars['Int']['output'],
}

export type Portfolio = Node & {
  createdAt: Scalars['DateTime']['output'],
  description?: Maybe<Scalars['String']['output']>,
  funds: PortfolioFund[],
  id: Scalars['ID']['output'],
  members: Membership[],
  name: Scalars['String']['output'],
  updatedAt: Scalars['DateTime']['output'],
}

export type PortfolioFund = Node & {
  cost: Scalars['Float']['output'],
  createdAt: Scalars['DateTime']['output'],
  fund: Fund,
  id: Scalars['ID']['output'],
  portfolio: Portfolio,
  units: Scalars['Float']['output'],
  updatedAt: Scalars['DateTime']['output'],
}

export interface PortfolioFundsInput {
  page?: InputMaybe<PageInput>,
  portfolioId: Scalars['ID']['input'],
}

export type PortfolioFundsPayload = PagePayload & {
  nodes: PortfolioFund[],
  pageInfo: PageInfo,
  total: Scalars['Int']['output'],
}

export interface Query {
  add?: Maybe<Scalars['Int']['output']>,
  fund: Fund,
  funds: FundsPayload,
  me?: Maybe<User>,
  portfolio: Portfolio,
  portfolioFund: PortfolioFund,
  portfolioFunds: PortfolioFundsPayload,
}


export interface QueryAddArgs {
  x?: InputMaybe<Scalars['Int']['input']>,
  y?: InputMaybe<Scalars['Int']['input']>,
}


export interface QueryFundArgs {
  fundId: Scalars['ID']['input'],
}


export interface QueryFundsArgs {
  input?: InputMaybe<FundsInput>,
}


export interface QueryPortfolioArgs {
  portfolioId: Scalars['ID']['input'],
}


export interface QueryPortfolioFundArgs {
  portfolioFundId: Scalars['ID']['input'],
}


export interface QueryPortfolioFundsArgs {
  input: PortfolioFundsInput,
}

export interface ResendCodeInput {
  from__confirm?: InputMaybe<Scalars['String']['input']>,
  mobile?: InputMaybe<Scalars['PhoneNumber']['input']>,
  name__confirm?: InputMaybe<Scalars['String']['input']>,
  userId?: InputMaybe<Scalars['ID']['input']>,
}

export interface ResetPasswordInput {
  code: Scalars['ID']['input'],
  from__confirm?: InputMaybe<Scalars['String']['input']>,
  mobile: Scalars['PhoneNumber']['input'],
  name__confirm?: InputMaybe<Scalars['String']['input']>,
  password: Scalars['ID']['input'],
}

export interface SignInInput {
  from__confirm?: InputMaybe<Scalars['String']['input']>,
  mobile: Scalars['PhoneNumber']['input'],
  name__confirm?: InputMaybe<Scalars['String']['input']>,
  password: Scalars['ID']['input'],
}

export interface SignUpInput {
  firstName: Scalars['ID']['input'],
  lastName?: InputMaybe<Scalars['ID']['input']>,
  mobile: Scalars['PhoneNumber']['input'],
  password: Scalars['ID']['input'],
}

export interface SuccessPayload {
  error?: Maybe<ErrorCode>,
}

export interface UpdateFundInput {
  category?: InputMaybe<FundCategory>,
  description?: InputMaybe<Scalars['String']['input']>,
  fundId: Scalars['ID']['input'],
  lastNav: Scalars['Float']['input'],
  name?: InputMaybe<Scalars['String']['input']>,
  plan?: InputMaybe<FundPlan>,
  symbol1?: InputMaybe<Scalars['String']['input']>,
  symbol2?: InputMaybe<Scalars['String']['input']>,
  type?: InputMaybe<FundType>,
}

export interface UpdatePortfolioFundInput {
  cost?: InputMaybe<Scalars['Float']['input']>,
  portfolioFundId: Scalars['ID']['input'],
  units?: InputMaybe<Scalars['Float']['input']>,
}

export interface UpdatePortfolioInput {
  description?: InputMaybe<Scalars['String']['input']>,
  name?: InputMaybe<Scalars['String']['input']>,
  portfolioId: Scalars['ID']['input'],
}

export type User = Node & {
  codes: Code[],
  createdAt: Scalars['DateTime']['output'],
  firstName: Scalars['ID']['output'],
  id: Scalars['ID']['output'],
  isBlocked: Scalars['Boolean']['output'],
  isVerified: Scalars['Boolean']['output'],
  lastName?: Maybe<Scalars['ID']['output']>,
  memberships: Membership[],
  mobile: Scalars['PhoneNumber']['output'],
  /**  The generated full (first+last) name  */
  name: Scalars['ID']['output'],
  password: Scalars['ID']['output'],
  salt: Scalars['ID']['output'],
  status: UserStatus,
  /**  A fresh JWT for the user  */
  token: Scalars['JWT']['output'],
  updatedAt: Scalars['DateTime']['output'],
}

export enum UserRole {
  Admin = 'Admin',
  Member = 'Member'
}

export enum UserStatus {
  Superadmin = 'Superadmin',
  User = 'User'
}

export interface VerifyCodeInput {
  code: Scalars['ID']['input'],
  from__confirm?: InputMaybe<Scalars['String']['input']>,
  mobile?: InputMaybe<Scalars['PhoneNumber']['input']>,
  name__confirm?: InputMaybe<Scalars['String']['input']>,
  userId?: InputMaybe<Scalars['ID']['input']>,
}

export interface FundResponseFragment { id: string, name: string, description?: string | undefined, plan?: FundPlan | undefined, type?: FundType | undefined, category?: FundCategory | undefined, lastNav: number }

export interface PageInfoResponseFragment { hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: string | undefined, endCursor?: string | undefined }

export interface PortfolioResponseFragment { id: string, name: string, description?: string | undefined }

export interface PortfolioFundResponseFragment { id: string, units: number, cost: number, fund: { id: string, name: string, description?: string | undefined, plan?: FundPlan | undefined, type?: FundType | undefined, category?: FundCategory | undefined, lastNav: number } }

export interface MyUserResponseFragment { id: string, firstName: string, lastName?: string | undefined, name: string, mobile: string, token: string, status: UserStatus, isVerified: boolean, isBlocked: boolean, memberships: { id: string, role: UserRole, portfolio: { id: string, name: string } }[] }

export interface GuestUserResponseFragment { id: string }

export type SignInMutationVariables = Exact<{
  input: SignInInput,
}>


export interface SignInMutation { signIn: { id: string, firstName: string, lastName?: string | undefined, name: string, mobile: string, token: string, status: UserStatus, isVerified: boolean, isBlocked: boolean, memberships: { id: string, role: UserRole, portfolio: { id: string, name: string } }[] } }

export type SignUpMutationVariables = Exact<{
  input: SignUpInput,
}>


export interface SignUpMutation { signUp: { id: string } }

export type VerifyCodeMutationVariables = Exact<{
  input: VerifyCodeInput,
}>


export interface VerifyCodeMutation { verifyCode: { error?: ErrorCode | undefined } }

export type ResendCodeMutationVariables = Exact<{
  input: ResendCodeInput,
}>


export interface ResendCodeMutation { resendCode: { error?: ErrorCode | undefined } }

export type ForgotPasswordMutationVariables = Exact<{
  input: ForgotPasswordInput,
}>


export interface ForgotPasswordMutation { forgotPassword: { error?: ErrorCode | undefined } }

export type ResetPasswordMutationVariables = Exact<{
  input: ResetPasswordInput,
}>


export interface ResetPasswordMutation { resetPassword: { error?: ErrorCode | undefined } }

export type CreatePortfolioMutationVariables = Exact<{
  input: CreatePortfolioInput,
}>


export interface CreatePortfolioMutation { createPortfolio: { id: string } }

export type CreatePortfolioFundMutationVariables = Exact<{
  input: CreatePortfolioFundInput,
}>


export interface CreatePortfolioFundMutation { createPortfolioFund: { id: string, units: number, cost: number, fund: { id: string, name: string, description?: string | undefined, plan?: FundPlan | undefined, type?: FundType | undefined, category?: FundCategory | undefined, lastNav: number } } }

export type MeQueryVariables = Exact<Record<string, never>>


export interface MeQuery { me?: { id: string, firstName: string, lastName?: string | undefined, name: string, mobile: string, token: string, status: UserStatus, isVerified: boolean, isBlocked: boolean, memberships: { id: string, role: UserRole, portfolio: { id: string, name: string } }[] } | undefined }

export type FundsQueryVariables = Exact<{
  input?: InputMaybe<FundsInput>,
}>


export interface FundsQuery { funds: { nodes: { id: string, name: string, description?: string | undefined, plan?: FundPlan | undefined, type?: FundType | undefined, category?: FundCategory | undefined, lastNav: number }[], pageInfo: { hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: string | undefined, endCursor?: string | undefined } } }

export type PortfolioQueryVariables = Exact<{
  portfolioId: Scalars['ID']['input'],
}>


export interface PortfolioQuery { portfolio: { id: string, name: string, description?: string | undefined } }

export type PortfolioFundsQueryVariables = Exact<{
  input: PortfolioFundsInput,
}>


export interface PortfolioFundsQuery { portfolioFunds: { nodes: { id: string, units: number, cost: number, fund: { id: string, name: string, description?: string | undefined, plan?: FundPlan | undefined, type?: FundType | undefined, category?: FundCategory | undefined, lastNav: number } }[], pageInfo: { hasNextPage: boolean, hasPreviousPage: boolean, startCursor?: string | undefined, endCursor?: string | undefined } } }

export const PageInfoResponseFragmentDoc = gql`
    fragment PageInfoResponse on PageInfo {
  hasNextPage
  hasPreviousPage
  startCursor
  endCursor
}
    `
export const PortfolioResponseFragmentDoc = gql`
    fragment PortfolioResponse on Portfolio {
  id
  name
  description
}
    `
export const FundResponseFragmentDoc = gql`
    fragment FundResponse on Fund {
  id
  name
  description
  plan
  type
  category
  lastNav
}
    `
export const PortfolioFundResponseFragmentDoc = gql`
    fragment PortfolioFundResponse on PortfolioFund {
  id
  fund {
    ...FundResponse
  }
  units
  cost
}
    ${FundResponseFragmentDoc}`
export const MyUserResponseFragmentDoc = gql`
    fragment MyUserResponse on User {
  id
  firstName
  lastName
  name
  mobile
  token
  status
  isVerified
  isBlocked
  memberships {
    id
    role
    portfolio {
      id
      name
    }
  }
}
    `
export const GuestUserResponseFragmentDoc = gql`
    fragment GuestUserResponse on User {
  id
}
    `
export const SignInDocument = gql`
    mutation signIn($input: SignInInput!) {
  signIn(input: $input) {
    ...MyUserResponse
  }
}
    ${MyUserResponseFragmentDoc}`
export type SignInMutationFn = Apollo.MutationFunction<SignInMutation, SignInMutationVariables>

/**
 * __useSignInMutation__
 *
 * To run a mutation, you first call `useSignInMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignInMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signInMutation, { data, loading, error }] = useSignInMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSignInMutation(baseOptions?: Apollo.MutationHookOptions<SignInMutation, SignInMutationVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useMutation<SignInMutation, SignInMutationVariables>(SignInDocument, options)
}
export type SignInMutationHookResult = ReturnType<typeof useSignInMutation>
export type SignInMutationResult = Apollo.MutationResult<SignInMutation>
export type SignInMutationOptions = Apollo.BaseMutationOptions<SignInMutation, SignInMutationVariables>
export const SignUpDocument = gql`
    mutation signUp($input: SignUpInput!) {
  signUp(input: $input) {
    ...GuestUserResponse
  }
}
    ${GuestUserResponseFragmentDoc}`
export type SignUpMutationFn = Apollo.MutationFunction<SignUpMutation, SignUpMutationVariables>

/**
 * __useSignUpMutation__
 *
 * To run a mutation, you first call `useSignUpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignUpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signUpMutation, { data, loading, error }] = useSignUpMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSignUpMutation(baseOptions?: Apollo.MutationHookOptions<SignUpMutation, SignUpMutationVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useMutation<SignUpMutation, SignUpMutationVariables>(SignUpDocument, options)
}
export type SignUpMutationHookResult = ReturnType<typeof useSignUpMutation>
export type SignUpMutationResult = Apollo.MutationResult<SignUpMutation>
export type SignUpMutationOptions = Apollo.BaseMutationOptions<SignUpMutation, SignUpMutationVariables>
export const VerifyCodeDocument = gql`
    mutation verifyCode($input: VerifyCodeInput!) {
  verifyCode(input: $input) {
    error
  }
}
    `
export type VerifyCodeMutationFn = Apollo.MutationFunction<VerifyCodeMutation, VerifyCodeMutationVariables>

/**
 * __useVerifyCodeMutation__
 *
 * To run a mutation, you first call `useVerifyCodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVerifyCodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [verifyCodeMutation, { data, loading, error }] = useVerifyCodeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useVerifyCodeMutation(baseOptions?: Apollo.MutationHookOptions<VerifyCodeMutation, VerifyCodeMutationVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useMutation<VerifyCodeMutation, VerifyCodeMutationVariables>(VerifyCodeDocument, options)
}
export type VerifyCodeMutationHookResult = ReturnType<typeof useVerifyCodeMutation>
export type VerifyCodeMutationResult = Apollo.MutationResult<VerifyCodeMutation>
export type VerifyCodeMutationOptions = Apollo.BaseMutationOptions<VerifyCodeMutation, VerifyCodeMutationVariables>
export const ResendCodeDocument = gql`
    mutation resendCode($input: ResendCodeInput!) {
  resendCode(input: $input) {
    error
  }
}
    `
export type ResendCodeMutationFn = Apollo.MutationFunction<ResendCodeMutation, ResendCodeMutationVariables>

/**
 * __useResendCodeMutation__
 *
 * To run a mutation, you first call `useResendCodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResendCodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resendCodeMutation, { data, loading, error }] = useResendCodeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useResendCodeMutation(baseOptions?: Apollo.MutationHookOptions<ResendCodeMutation, ResendCodeMutationVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useMutation<ResendCodeMutation, ResendCodeMutationVariables>(ResendCodeDocument, options)
}
export type ResendCodeMutationHookResult = ReturnType<typeof useResendCodeMutation>
export type ResendCodeMutationResult = Apollo.MutationResult<ResendCodeMutation>
export type ResendCodeMutationOptions = Apollo.BaseMutationOptions<ResendCodeMutation, ResendCodeMutationVariables>
export const ForgotPasswordDocument = gql`
    mutation forgotPassword($input: ForgotPasswordInput!) {
  forgotPassword(input: $input) {
    error
  }
}
    `
export type ForgotPasswordMutationFn = Apollo.MutationFunction<ForgotPasswordMutation, ForgotPasswordMutationVariables>

/**
 * __useForgotPasswordMutation__
 *
 * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useForgotPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useMutation<ForgotPasswordMutation, ForgotPasswordMutationVariables>(ForgotPasswordDocument, options)
}
export type ForgotPasswordMutationHookResult = ReturnType<typeof useForgotPasswordMutation>
export type ForgotPasswordMutationResult = Apollo.MutationResult<ForgotPasswordMutation>
export type ForgotPasswordMutationOptions = Apollo.BaseMutationOptions<ForgotPasswordMutation, ForgotPasswordMutationVariables>
export const ResetPasswordDocument = gql`
    mutation resetPassword($input: ResetPasswordInput!) {
  resetPassword(input: $input) {
    error
  }
}
    `
export type ResetPasswordMutationFn = Apollo.MutationFunction<ResetPasswordMutation, ResetPasswordMutationVariables>

/**
 * __useResetPasswordMutation__
 *
 * To run a mutation, you first call `useResetPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetPasswordMutation, { data, loading, error }] = useResetPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useResetPasswordMutation(baseOptions?: Apollo.MutationHookOptions<ResetPasswordMutation, ResetPasswordMutationVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useMutation<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument, options)
}
export type ResetPasswordMutationHookResult = ReturnType<typeof useResetPasswordMutation>
export type ResetPasswordMutationResult = Apollo.MutationResult<ResetPasswordMutation>
export type ResetPasswordMutationOptions = Apollo.BaseMutationOptions<ResetPasswordMutation, ResetPasswordMutationVariables>
export const CreatePortfolioDocument = gql`
    mutation CreatePortfolio($input: CreatePortfolioInput!) {
  createPortfolio(input: $input) {
    id
  }
}
    `
export type CreatePortfolioMutationFn = Apollo.MutationFunction<CreatePortfolioMutation, CreatePortfolioMutationVariables>

/**
 * __useCreatePortfolioMutation__
 *
 * To run a mutation, you first call `useCreatePortfolioMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePortfolioMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPortfolioMutation, { data, loading, error }] = useCreatePortfolioMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatePortfolioMutation(baseOptions?: Apollo.MutationHookOptions<CreatePortfolioMutation, CreatePortfolioMutationVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useMutation<CreatePortfolioMutation, CreatePortfolioMutationVariables>(CreatePortfolioDocument, options)
}
export type CreatePortfolioMutationHookResult = ReturnType<typeof useCreatePortfolioMutation>
export type CreatePortfolioMutationResult = Apollo.MutationResult<CreatePortfolioMutation>
export type CreatePortfolioMutationOptions = Apollo.BaseMutationOptions<CreatePortfolioMutation, CreatePortfolioMutationVariables>
export const CreatePortfolioFundDocument = gql`
    mutation CreatePortfolioFund($input: CreatePortfolioFundInput!) {
  createPortfolioFund(input: $input) {
    ...PortfolioFundResponse
  }
}
    ${PortfolioFundResponseFragmentDoc}`
export type CreatePortfolioFundMutationFn = Apollo.MutationFunction<CreatePortfolioFundMutation, CreatePortfolioFundMutationVariables>

/**
 * __useCreatePortfolioFundMutation__
 *
 * To run a mutation, you first call `useCreatePortfolioFundMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePortfolioFundMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPortfolioFundMutation, { data, loading, error }] = useCreatePortfolioFundMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatePortfolioFundMutation(baseOptions?: Apollo.MutationHookOptions<CreatePortfolioFundMutation, CreatePortfolioFundMutationVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useMutation<CreatePortfolioFundMutation, CreatePortfolioFundMutationVariables>(CreatePortfolioFundDocument, options)
}
export type CreatePortfolioFundMutationHookResult = ReturnType<typeof useCreatePortfolioFundMutation>
export type CreatePortfolioFundMutationResult = Apollo.MutationResult<CreatePortfolioFundMutation>
export type CreatePortfolioFundMutationOptions = Apollo.BaseMutationOptions<CreatePortfolioFundMutation, CreatePortfolioFundMutationVariables>
export const MeDocument = gql`
    query me {
  me {
    ...MyUserResponse
  }
}
    ${MyUserResponseFragmentDoc}`

/**
 * __useMeQuery__
 *
 * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.
 * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMeQuery({
 *   variables: {
 *   },
 * });
 */
export function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options)
}
export function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options)
}
export function useMeSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<MeQuery, MeQueryVariables>) {
  const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
  return Apollo.useSuspenseQuery<MeQuery, MeQueryVariables>(MeDocument, options)
}
export type MeQueryHookResult = ReturnType<typeof useMeQuery>
export type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>
export type MeSuspenseQueryHookResult = ReturnType<typeof useMeSuspenseQuery>
export type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>
export const FundsDocument = gql`
    query funds($input: FundsInput) {
  funds(input: $input) {
    nodes {
      ...FundResponse
    }
    pageInfo {
      ...PageInfoResponse
    }
  }
}
    ${FundResponseFragmentDoc}
${PageInfoResponseFragmentDoc}`

/**
 * __useFundsQuery__
 *
 * To run a query within a React component, call `useFundsQuery` and pass it any options that fit your needs.
 * When your component renders, `useFundsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFundsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useFundsQuery(baseOptions?: Apollo.QueryHookOptions<FundsQuery, FundsQueryVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useQuery<FundsQuery, FundsQueryVariables>(FundsDocument, options)
}
export function useFundsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FundsQuery, FundsQueryVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useLazyQuery<FundsQuery, FundsQueryVariables>(FundsDocument, options)
}
export function useFundsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<FundsQuery, FundsQueryVariables>) {
  const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
  return Apollo.useSuspenseQuery<FundsQuery, FundsQueryVariables>(FundsDocument, options)
}
export type FundsQueryHookResult = ReturnType<typeof useFundsQuery>
export type FundsLazyQueryHookResult = ReturnType<typeof useFundsLazyQuery>
export type FundsSuspenseQueryHookResult = ReturnType<typeof useFundsSuspenseQuery>
export type FundsQueryResult = Apollo.QueryResult<FundsQuery, FundsQueryVariables>
export const PortfolioDocument = gql`
    query portfolio($portfolioId: ID!) {
  portfolio(portfolioId: $portfolioId) {
    ...PortfolioResponse
  }
}
    ${PortfolioResponseFragmentDoc}`

/**
 * __usePortfolioQuery__
 *
 * To run a query within a React component, call `usePortfolioQuery` and pass it any options that fit your needs.
 * When your component renders, `usePortfolioQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePortfolioQuery({
 *   variables: {
 *      portfolioId: // value for 'portfolioId'
 *   },
 * });
 */
export function usePortfolioQuery(baseOptions: Apollo.QueryHookOptions<PortfolioQuery, PortfolioQueryVariables> & ({ variables: PortfolioQueryVariables, skip?: boolean } | { skip: boolean }) ) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useQuery<PortfolioQuery, PortfolioQueryVariables>(PortfolioDocument, options)
}
export function usePortfolioLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PortfolioQuery, PortfolioQueryVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useLazyQuery<PortfolioQuery, PortfolioQueryVariables>(PortfolioDocument, options)
}
export function usePortfolioSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<PortfolioQuery, PortfolioQueryVariables>) {
  const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
  return Apollo.useSuspenseQuery<PortfolioQuery, PortfolioQueryVariables>(PortfolioDocument, options)
}
export type PortfolioQueryHookResult = ReturnType<typeof usePortfolioQuery>
export type PortfolioLazyQueryHookResult = ReturnType<typeof usePortfolioLazyQuery>
export type PortfolioSuspenseQueryHookResult = ReturnType<typeof usePortfolioSuspenseQuery>
export type PortfolioQueryResult = Apollo.QueryResult<PortfolioQuery, PortfolioQueryVariables>
export const PortfolioFundsDocument = gql`
    query portfolioFunds($input: PortfolioFundsInput!) {
  portfolioFunds(input: $input) {
    nodes {
      ...PortfolioFundResponse
    }
    pageInfo {
      ...PageInfoResponse
    }
  }
}
    ${PortfolioFundResponseFragmentDoc}
${PageInfoResponseFragmentDoc}`

/**
 * __usePortfolioFundsQuery__
 *
 * To run a query within a React component, call `usePortfolioFundsQuery` and pass it any options that fit your needs.
 * When your component renders, `usePortfolioFundsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePortfolioFundsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function usePortfolioFundsQuery(baseOptions: Apollo.QueryHookOptions<PortfolioFundsQuery, PortfolioFundsQueryVariables> & ({ variables: PortfolioFundsQueryVariables, skip?: boolean } | { skip: boolean }) ) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useQuery<PortfolioFundsQuery, PortfolioFundsQueryVariables>(PortfolioFundsDocument, options)
}
export function usePortfolioFundsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PortfolioFundsQuery, PortfolioFundsQueryVariables>) {
  const options = {...defaultOptions, ...baseOptions}
  return Apollo.useLazyQuery<PortfolioFundsQuery, PortfolioFundsQueryVariables>(PortfolioFundsDocument, options)
}
export function usePortfolioFundsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<PortfolioFundsQuery, PortfolioFundsQueryVariables>) {
  const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
  return Apollo.useSuspenseQuery<PortfolioFundsQuery, PortfolioFundsQueryVariables>(PortfolioFundsDocument, options)
}
export type PortfolioFundsQueryHookResult = ReturnType<typeof usePortfolioFundsQuery>
export type PortfolioFundsLazyQueryHookResult = ReturnType<typeof usePortfolioFundsLazyQuery>
export type PortfolioFundsSuspenseQueryHookResult = ReturnType<typeof usePortfolioFundsSuspenseQuery>
export type PortfolioFundsQueryResult = Apollo.QueryResult<PortfolioFundsQuery, PortfolioFundsQueryVariables>
export type CodeKeySpecifier = ('code' | 'createdAt' | 'expireAt' | 'id' | 'updatedAt' | 'user' | CodeKeySpecifier)[]
export interface CodeFieldPolicy {
  code?: FieldPolicy<any> | FieldReadFunction<any>,
  createdAt?: FieldPolicy<any> | FieldReadFunction<any>,
  expireAt?: FieldPolicy<any> | FieldReadFunction<any>,
  id?: FieldPolicy<any> | FieldReadFunction<any>,
  updatedAt?: FieldPolicy<any> | FieldReadFunction<any>,
  user?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type FundKeySpecifier = ('category' | 'createdAt' | 'description' | 'id' | 'lastNav' | 'name' | 'plan' | 'symbol1' | 'symbol2' | 'type' | 'updatedAt' | FundKeySpecifier)[]
export interface FundFieldPolicy {
  category?: FieldPolicy<any> | FieldReadFunction<any>,
  createdAt?: FieldPolicy<any> | FieldReadFunction<any>,
  description?: FieldPolicy<any> | FieldReadFunction<any>,
  id?: FieldPolicy<any> | FieldReadFunction<any>,
  lastNav?: FieldPolicy<any> | FieldReadFunction<any>,
  name?: FieldPolicy<any> | FieldReadFunction<any>,
  plan?: FieldPolicy<any> | FieldReadFunction<any>,
  symbol1?: FieldPolicy<any> | FieldReadFunction<any>,
  symbol2?: FieldPolicy<any> | FieldReadFunction<any>,
  type?: FieldPolicy<any> | FieldReadFunction<any>,
  updatedAt?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type FundsPayloadKeySpecifier = ('nodes' | 'pageInfo' | 'total' | FundsPayloadKeySpecifier)[]
export interface FundsPayloadFieldPolicy {
  nodes?: FieldPolicy<any> | FieldReadFunction<any>,
  pageInfo?: FieldPolicy<any> | FieldReadFunction<any>,
  total?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type MembershipKeySpecifier = ('createdAt' | 'id' | 'portfolio' | 'role' | 'updatedAt' | 'user' | MembershipKeySpecifier)[]
export interface MembershipFieldPolicy {
  createdAt?: FieldPolicy<any> | FieldReadFunction<any>,
  id?: FieldPolicy<any> | FieldReadFunction<any>,
  portfolio?: FieldPolicy<any> | FieldReadFunction<any>,
  role?: FieldPolicy<any> | FieldReadFunction<any>,
  updatedAt?: FieldPolicy<any> | FieldReadFunction<any>,
  user?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type MutationKeySpecifier = ('createFund' | 'createPortfolio' | 'createPortfolioFund' | 'deleteFund' | 'deletePortfolio' | 'deletePortfolioFund' | 'forgotPassword' | 'resendCode' | 'resetPassword' | 'signIn' | 'signUp' | 'updateFund' | 'updatePortfolio' | 'updatePortfolioFund' | 'verifyCode' | MutationKeySpecifier)[]
export interface MutationFieldPolicy {
  createFund?: FieldPolicy<any> | FieldReadFunction<any>,
  createPortfolio?: FieldPolicy<any> | FieldReadFunction<any>,
  createPortfolioFund?: FieldPolicy<any> | FieldReadFunction<any>,
  deleteFund?: FieldPolicy<any> | FieldReadFunction<any>,
  deletePortfolio?: FieldPolicy<any> | FieldReadFunction<any>,
  deletePortfolioFund?: FieldPolicy<any> | FieldReadFunction<any>,
  forgotPassword?: FieldPolicy<any> | FieldReadFunction<any>,
  resendCode?: FieldPolicy<any> | FieldReadFunction<any>,
  resetPassword?: FieldPolicy<any> | FieldReadFunction<any>,
  signIn?: FieldPolicy<any> | FieldReadFunction<any>,
  signUp?: FieldPolicy<any> | FieldReadFunction<any>,
  updateFund?: FieldPolicy<any> | FieldReadFunction<any>,
  updatePortfolio?: FieldPolicy<any> | FieldReadFunction<any>,
  updatePortfolioFund?: FieldPolicy<any> | FieldReadFunction<any>,
  verifyCode?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type NodeKeySpecifier = ('createdAt' | 'id' | 'updatedAt' | NodeKeySpecifier)[]
export interface NodeFieldPolicy {
  createdAt?: FieldPolicy<any> | FieldReadFunction<any>,
  id?: FieldPolicy<any> | FieldReadFunction<any>,
  updatedAt?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type PageInfoKeySpecifier = ('endCursor' | 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | PageInfoKeySpecifier)[]
export interface PageInfoFieldPolicy {
  endCursor?: FieldPolicy<any> | FieldReadFunction<any>,
  hasNextPage?: FieldPolicy<any> | FieldReadFunction<any>,
  hasPreviousPage?: FieldPolicy<any> | FieldReadFunction<any>,
  startCursor?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type PagePayloadKeySpecifier = ('nodes' | 'pageInfo' | 'total' | PagePayloadKeySpecifier)[]
export interface PagePayloadFieldPolicy {
  nodes?: FieldPolicy<any> | FieldReadFunction<any>,
  pageInfo?: FieldPolicy<any> | FieldReadFunction<any>,
  total?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type PortfolioKeySpecifier = ('createdAt' | 'description' | 'funds' | 'id' | 'members' | 'name' | 'updatedAt' | PortfolioKeySpecifier)[]
export interface PortfolioFieldPolicy {
  createdAt?: FieldPolicy<any> | FieldReadFunction<any>,
  description?: FieldPolicy<any> | FieldReadFunction<any>,
  funds?: FieldPolicy<any> | FieldReadFunction<any>,
  id?: FieldPolicy<any> | FieldReadFunction<any>,
  members?: FieldPolicy<any> | FieldReadFunction<any>,
  name?: FieldPolicy<any> | FieldReadFunction<any>,
  updatedAt?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type PortfolioFundKeySpecifier = ('cost' | 'createdAt' | 'fund' | 'id' | 'portfolio' | 'units' | 'updatedAt' | PortfolioFundKeySpecifier)[]
export interface PortfolioFundFieldPolicy {
  cost?: FieldPolicy<any> | FieldReadFunction<any>,
  createdAt?: FieldPolicy<any> | FieldReadFunction<any>,
  fund?: FieldPolicy<any> | FieldReadFunction<any>,
  id?: FieldPolicy<any> | FieldReadFunction<any>,
  portfolio?: FieldPolicy<any> | FieldReadFunction<any>,
  units?: FieldPolicy<any> | FieldReadFunction<any>,
  updatedAt?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type PortfolioFundsPayloadKeySpecifier = ('nodes' | 'pageInfo' | 'total' | PortfolioFundsPayloadKeySpecifier)[]
export interface PortfolioFundsPayloadFieldPolicy {
  nodes?: FieldPolicy<any> | FieldReadFunction<any>,
  pageInfo?: FieldPolicy<any> | FieldReadFunction<any>,
  total?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type QueryKeySpecifier = ('add' | 'fund' | 'funds' | 'me' | 'portfolio' | 'portfolioFund' | 'portfolioFunds' | QueryKeySpecifier)[]
export interface QueryFieldPolicy {
  add?: FieldPolicy<any> | FieldReadFunction<any>,
  fund?: FieldPolicy<any> | FieldReadFunction<any>,
  funds?: FieldPolicy<any> | FieldReadFunction<any>,
  me?: FieldPolicy<any> | FieldReadFunction<any>,
  portfolio?: FieldPolicy<any> | FieldReadFunction<any>,
  portfolioFund?: FieldPolicy<any> | FieldReadFunction<any>,
  portfolioFunds?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type SuccessPayloadKeySpecifier = ('error' | SuccessPayloadKeySpecifier)[]
export interface SuccessPayloadFieldPolicy {
  error?: FieldPolicy<any> | FieldReadFunction<any>,
}
export type UserKeySpecifier = ('codes' | 'createdAt' | 'firstName' | 'id' | 'isBlocked' | 'isVerified' | 'lastName' | 'memberships' | 'mobile' | 'name' | 'password' | 'salt' | 'status' | 'token' | 'updatedAt' | UserKeySpecifier)[]
export interface UserFieldPolicy {
  codes?: FieldPolicy<any> | FieldReadFunction<any>,
  createdAt?: FieldPolicy<any> | FieldReadFunction<any>,
  firstName?: FieldPolicy<any> | FieldReadFunction<any>,
  id?: FieldPolicy<any> | FieldReadFunction<any>,
  isBlocked?: FieldPolicy<any> | FieldReadFunction<any>,
  isVerified?: FieldPolicy<any> | FieldReadFunction<any>,
  lastName?: FieldPolicy<any> | FieldReadFunction<any>,
  memberships?: FieldPolicy<any> | FieldReadFunction<any>,
  mobile?: FieldPolicy<any> | FieldReadFunction<any>,
  name?: FieldPolicy<any> | FieldReadFunction<any>,
  password?: FieldPolicy<any> | FieldReadFunction<any>,
  salt?: FieldPolicy<any> | FieldReadFunction<any>,
  status?: FieldPolicy<any> | FieldReadFunction<any>,
  token?: FieldPolicy<any> | FieldReadFunction<any>,
  updatedAt?: FieldPolicy<any> | FieldReadFunction<any>,
}
export interface StrictTypedTypePolicies {
  Code?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | CodeKeySpecifier | (() => undefined | CodeKeySpecifier),
    fields?: CodeFieldPolicy,
  },
  Fund?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | FundKeySpecifier | (() => undefined | FundKeySpecifier),
    fields?: FundFieldPolicy,
  },
  FundsPayload?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | FundsPayloadKeySpecifier | (() => undefined | FundsPayloadKeySpecifier),
    fields?: FundsPayloadFieldPolicy,
  },
  Membership?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | MembershipKeySpecifier | (() => undefined | MembershipKeySpecifier),
    fields?: MembershipFieldPolicy,
  },
  Mutation?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | MutationKeySpecifier | (() => undefined | MutationKeySpecifier),
    fields?: MutationFieldPolicy,
  },
  Node?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | NodeKeySpecifier | (() => undefined | NodeKeySpecifier),
    fields?: NodeFieldPolicy,
  },
  PageInfo?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | PageInfoKeySpecifier | (() => undefined | PageInfoKeySpecifier),
    fields?: PageInfoFieldPolicy,
  },
  PagePayload?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | PagePayloadKeySpecifier | (() => undefined | PagePayloadKeySpecifier),
    fields?: PagePayloadFieldPolicy,
  },
  Portfolio?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | PortfolioKeySpecifier | (() => undefined | PortfolioKeySpecifier),
    fields?: PortfolioFieldPolicy,
  },
  PortfolioFund?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | PortfolioFundKeySpecifier | (() => undefined | PortfolioFundKeySpecifier),
    fields?: PortfolioFundFieldPolicy,
  },
  PortfolioFundsPayload?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | PortfolioFundsPayloadKeySpecifier | (() => undefined | PortfolioFundsPayloadKeySpecifier),
    fields?: PortfolioFundsPayloadFieldPolicy,
  },
  Query?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | QueryKeySpecifier | (() => undefined | QueryKeySpecifier),
    fields?: QueryFieldPolicy,
  },
  SuccessPayload?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | SuccessPayloadKeySpecifier | (() => undefined | SuccessPayloadKeySpecifier),
    fields?: SuccessPayloadFieldPolicy,
  },
  User?: Omit<TypePolicy, 'fields' | 'keyFields'> & {
    keyFields?: false | UserKeySpecifier | (() => undefined | UserKeySpecifier),
    fields?: UserFieldPolicy,
  },
}
export type TypedTypePolicies = StrictTypedTypePolicies & TypePolicies